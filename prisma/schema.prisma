// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  SUPERADMIN
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String @unique
  hash     String
  username String
  role     Role

  // New relations
  progress      UserCourseProgress[]
  ratings       CourseRating[]
  ChallengeLike ChallengeLike[]
  image         UserProfileImage[]

  @@map("users")
}

model UserProfileImage {
  id   Int    @id @default(autoincrement())
  path String

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
}

// New models
model Course {
  id            Int      @id @default(autoincrement())
  title         String   @unique()
  category      String
  level         Level
  description   String
  duration      Int // Duration in weeks
  studentsCount Int      @default(0)
  rating        Float    @default(0.0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  modules  CourseModule[]
  progress UserCourseProgress[]
  ratings  CourseRating[]
  videos   Video[]
}

model CourseModule {
  id       Int    @id @default(autoincrement())
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int
  title    String
  number   Int    @unique()

  miniModules MiniModule[]
}

model Video {
  id       Int    @id @default(autoincrement())
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int
  title    String
  number   Int
  url      String // Cloudinary video URL

  @@unique([courseId, number])
}

model MiniModule {
  id             Int          @id @default(autoincrement())
  courseModule   CourseModule @relation(fields: [courseModuleId], references: [id])
  courseModuleId Int
  title          String
  number         Int          @unique()

  lessons      Lesson[]
  lessonVideos LessonVideo[]
}

model Lesson {
  id          Int     @id @default(autoincrement())
  title       String
  explanation String
  more        String?
  example     String?
  note        String?
  assignment  String
  number      Int     @unique()

  miniModuleId Int
  miniModule   MiniModule @relation(fields: [miniModuleId], references: [id])
  solutions   LessonSolution[]
}

model LessonVideo {
  id     Int    @id @default(autoincrement())
  title  String
  number Int    @unique()
  url    String // Cloudinary video URL

  miniModuleId Int
  miniModule   MiniModule @relation(fields: [miniModuleId], references: [id])
}

model LessonSolution {
  id     Int    @id @default(autoincrement())
  number Int    @unique()
  solution  String

  lessonId Int
  lesson Lesson @relation(fields: [lessonId], references: [id])
}

model UserCourseProgress {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    Int
  currentStep Int      @default(0)
  completed   Boolean  @default(false)
  startedAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rating      Int? // optional rating
}

model CourseRating {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model Challenge {
  id          Int     @id @default(autoincrement())
  difficulty  String
  title       String
  description String
  relation    String?
  duration    Int
  likes       Int     @default(0)

  instructions ChallengeInstructions[]
  likesList ChallengeLike[]
  solutions ChallengeSolutions[]
}

model ChallengeLike {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId Int

  @@unique([userId, challengeId])
}

model ChallengeInstructions {
  id Int @id @default(autoincrement())
  number Int
  instruction String

  challengeId Int
  challenge Challenge @relation(fields: [challengeId], references: [id])
}

model ChallengeSolutions {
  id Int @id @default(autoincrement())
  number Int  @unique()
  solution String

  challengeId Int
  challenge Challenge @relation(fields: [challengeId], references: [id])
}
