// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  SUPERADMIN
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String  @unique
  hash      String // Made optional for OAuth users
  username  String? // Optional if not enforced by OAuth
  role      Role
  isPremium Boolean @default(false)

  provider String  @default("local") // 'google' | 'github' | 'local'
  photo    String? // URL to OAuth profile photo

  courseId Int?
  course   Course? @relation(fields: [courseId], references: [id])

  ratings        CourseRating[]
  ChallengeLike  ChallengeLike[]
  image          UserProfileImage[]
  createdCourses Course[]             @relation("CreatedCourses")
  progress       UserCourseProgress[]

  userModuleProgress  userModuleProgress[]
  MiniModuleProgress  MiniModuleProgress[]
  userLessonProgress  UserLessonProgress[]
  courseLikes         CourseLike[]
  CompletedChallenges CompletedChallenges[]

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  @@map("users")
}

model UserProfileImage {
  id   Int    @id @default(autoincrement())
  path String

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
}

// New models
model Course {
  id            Int      @id @default(autoincrement())
  creatorId     Int
  creator       User     @relation("CreatedCourses", fields: [creatorId], references: [id])
  title         String   @unique()
  category      String
  level         Level
  description   String
  duration      String   @default("") // Duration in weeks
  studentsCount Int      @default(0)
  rating        Float    @default(0.0)
  likes         Int      @default(0)
  completions   Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  modules             CourseModule[]
  progress            UserCourseProgress[]
  ratings             CourseRating[]
  videos              Video[]
  users               User[]
  likedBy             CourseLike[]
  completedChallenges CompletedChallenges[]
}

model CourseLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  createdAt DateTime @default(now())

  @@unique([userId, courseId])
}

model UserCourseProgress {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    Int
  currentStep Int      @default(0)
  completed   Boolean  @default(false)
  startedAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rating      Int? // optional rating
}

model CourseModule {
  id       Int    @id @default(autoincrement())
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int
  title    String
  number   Int

  miniModules MiniModule[]
  progress    userModuleProgress[]

  @@unique([courseId, number])
}

model userModuleProgress {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  courseModule   CourseModule @relation(fields: [courseModuleId], references: [id])
  courseModuleId Int
  currentStep    Int          @default(0)
  completed      Boolean      @default(false)
  startedAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  courseId       Int?
}

model Video {
  id       Int    @id @default(autoincrement())
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int
  title    String
  number   Int
  url      String // Cloudinary video URL

  @@unique([courseId, number])
}

model MiniModule {
  id             Int          @id @default(autoincrement())
  courseModule   CourseModule @relation(fields: [courseModuleId], references: [id])
  courseModuleId Int
  title          String
  number         Int

  lessons      Lesson[]
  lessonVideos LessonVideo[]
  progress     MiniModuleProgress[]

  @@unique([courseModuleId, number])
}

model MiniModuleProgress {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  miniModule   MiniModule @relation(fields: [miniModuleId], references: [id])
  miniModuleId Int
  currentStep  Int        @default(0)
  completed    Boolean    @default(false)
  startedAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Lesson {
  id          Int     @id @default(autoincrement())
  title       String
  explanation String
  more        String?
  example     String?
  note        String?
  assignment  String
  number      Int

  miniModuleId Int
  miniModule   MiniModule           @relation(fields: [miniModuleId], references: [id])
  solutions    LessonSolution[]
  progress     UserLessonProgress[]
}

model LessonVideo {
  id     Int    @id @default(autoincrement())
  title  String
  number Int
  url    String // Cloudinary video URL

  miniModuleId Int
  miniModule   MiniModule @relation(fields: [miniModuleId], references: [id])

  @@unique([miniModuleId, number])
}

model LessonSolution {
  id       Int    @id @default(autoincrement())
  solution String

  lessonId Int    @unique()
  lesson   Lesson @relation(fields: [lessonId], references: [id])
}

model UserLessonProgress {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  lessonId    Int
  currentStep Int      @default(0)
  completed   Boolean  @default(false)
  startedAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CourseRating {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model Challenge {
  id          Int     @id @default(autoincrement())
  difficulty  String
  title       String
  description String
  relation    String?
  duration    String
  useEditor   Boolean @default(false)
  likes       Int     @default(0)

  instructions ChallengeInstructions[]
  likesList    ChallengeLike[]
  solutions    ChallengeSolutions[]

  completions CompletedChallenges[]
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  type       String   @default("text") // "text", "image", etc.
  createdAt  DateTime @default(now())

  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model ChallengeLike {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId Int

  @@unique([userId, challengeId])
}

model ChallengeInstructions {
  id          Int     @id @default(autoincrement())
  number      Int
  instruction String
  completed   Boolean @default(false)

  challengeId Int
  challenge   Challenge @relation(fields: [challengeId], references: [id])
}

model ChallengeSolutions {
  id       Int    @id @default(autoincrement())
  number   Int    @unique()
  solution String

  challengeId Int
  challenge   Challenge @relation(fields: [challengeId], references: [id])
}

model CompletedChallenges {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  challengeId Int
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  createdAt   DateTime  @default(now())

  Course Course[]
}
